<?php

namespace Fsb\La13\Entity;

use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\User;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Fsb\La13\Entity\Base\Deletable\DeletableEntityRepositoryInterface;
use Fsb\La13\Entity\Base\Activable\ActivableEntityRepositoryInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements DeletableEntityRepositoryInterface, ActivableEntityRepositoryInterface, UserProviderInterface
{
    /**
     * EntityManager $em
     */
    private $em;

    public function __construct($em)
    {
        $this->em = $em;
    }

    public function loadUserByUsername($username)
    {
        $user = null;

        $qb = $this->em->createQueryBuilder();

        $qb->select('u')
            ->from('Fsb\La13\Entity\User', 'u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
        ;

        try {
            $user = $qb->getQuery()->getSingleResult();
        }
        catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Aucun utilisateur ne correspond Ã  ce nom. "%s".', $user), 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        if (!$this->supportsClass(get_class($user))) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $user));
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return ($class === $this->getEntityName() || is_subclass_of($class, $this->getEntityName()));
    }

    /**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
    public function findAll()
    {
        return $this->findAllNotDeleted();
    }

    /**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
    public function findAllNotDeleted()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('u')
            ->from('Fsb\La13\Entity\User', 'u')
            ->where($qb->expr()->isNull('u.removedAt'))
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Find all entities that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return array
     */
    public function findAllActive()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('u')
            ->from('Fsb\La13\Entity\User', 'u')
            ->where($qb->expr()->isNull('u.removedAt'))
            ->andWhere('u.isHidden = :isHidden')
            ->setParameter('isHidden', false)
            ->orderBy('u.sorting', 'ASC')
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Find one entity by id that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return User
     */
    public function findOneActive($id)
    {
        $event = null;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('u')
            ->from('Fsb\La13\Entity\User', 'u')
            ->where($qb->expr()->isNull('u.removedAt'))
            ->andWhere('u.isHidden = :isHidden')
            ->andWhere('u.id = :id')
            ->setParameter('isHidden', false)
            ->setParameter('id', $id)
        ;

        try {
            $event = $qb->getQuery()->getSingleResult();
        }
        catch (NoResultException $e) {}

        return $event;
    }
}
