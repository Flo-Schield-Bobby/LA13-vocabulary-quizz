<?php

namespace Fsb\La13\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Fsb\La13\Entity\Base\Deletable\DeletableEntityRepositoryInterface;
use Fsb\La13\Entity\Base\Activable\ActivableEntityRepositoryInterface;

/**
 * AnswerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnswerRepository extends EntityRepository implements DeletableEntityRepositoryInterface, ActivableEntityRepositoryInterface
{
    /**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
    public function findAll()
    {
        return $this->findAllNotDeleted();
    }

    /**
     * Find all entities that have removed_at set up to null.
     *
     * @return array
     */
    public function findAllNotDeleted()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from('Fsb\La13\Entity\Answer', 'a')
            ->where($qb->expr()->isNull('a.removedAt'))
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Find all entities that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return array
     */
    public function findAllActive()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from('Fsb\La13\Entity\Answer', 'a')
            ->where($qb->expr()->isNull('a.removedAt'))
            ->andWhere('a.isHidden = :isHidden')
            ->setParameter('isHidden', false)
            ->orderBy('a.sorting', 'ASC')
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Find one entity by id that have removed_at set up to null and is_hidden property set up to false.
     *
     * @return Answer
     */
    public function findOneActive($id)
    {
        $event = null;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from('Fsb\La13\Entity\Answer', 'a')
            ->where($qb->expr()->isNull('a.removedAt'))
            ->andWhere('a.isHidden = :isHidden')
            ->andWhere('a.id = :id')
            ->setParameter('isHidden', false)
            ->setParameter('id', $id)
        ;

        try {
            $event = $qb->getQuery()->getSingleResult();
        }
        catch (NoResultException $e) {}

        return $event;
    }
}
